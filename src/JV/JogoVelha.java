/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JV;

import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class JogoVelha extends javax.swing.JFrame {

    private int profundidade = 1;
    private int algoritmo = 0;
    private int jogada = 0;
    Cerebro velha = new Cerebro();
    ImageIcon imgX = new ImageIcon(getClass().getResource("/img/x.png"));
    ImageIcon imgO = new ImageIcon(getClass().getResource("/img/o.png"));
    ImageIcon imgGanhaX = new ImageIcon(getClass().getResource("/img/ganhouX.gif"));
    ImageIcon imgGanhaO = new ImageIcon(getClass().getResource("/img/ganhouO.gif"));
    ImageIcon imgEmpate = new ImageIcon(getClass().getResource("/img/empate.gif"));
    int resposta = 10;
    float v = Integer.MAX_VALUE;
    Cerebro prox = null;

    /**
     * Creates new form JogoVelha
     */
    public JogoVelha() {
        initComponents();
        //construtor inicia setando botão do jogo
        this.getContentPane().setBackground(Color.DARK_GRAY);
        this.setVisible(true);
        um.setEnabled(false);
        dois.setEnabled(false);
        tres.setEnabled(false);
        quatro.setEnabled(false);
        cinco.setEnabled(false);
        seis.setEnabled(false);
        sete.setEnabled(false);
        oito.setEnabled(false);
        nove.setEnabled(false);
        combo.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        oito = new javax.swing.JButton();
        tres = new javax.swing.JButton();
        dois = new javax.swing.JButton();
        sete = new javax.swing.JButton();
        quatro = new javax.swing.JButton();
        seis = new javax.swing.JButton();
        nove = new javax.swing.JButton();
        cinco = new javax.swing.JButton();
        rotulo = new javax.swing.JLabel();
        minimax = new javax.swing.JRadioButton();
        poda = new javax.swing.JRadioButton();
        comeco = new javax.swing.JButton();
        um = new javax.swing.JButton();
        combo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jogo da Velha");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/img/velha.png")).getImage());

        oito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oitoActionPerformed(evt);
            }
        });

        tres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tresActionPerformed(evt);
            }
        });

        dois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doisActionPerformed(evt);
            }
        });

        sete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seteActionPerformed(evt);
            }
        });

        quatro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quatroActionPerformed(evt);
            }
        });

        seis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seisActionPerformed(evt);
            }
        });

        nove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noveActionPerformed(evt);
            }
        });

        cinco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cincoActionPerformed(evt);
            }
        });

        rotulo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rotulo.setForeground(new java.awt.Color(255, 255, 255));
        rotulo.setText("Qual algoritmo deseja usar?");

        buttonGroup1.add(minimax);
        minimax.setForeground(new java.awt.Color(255, 255, 255));
        minimax.setText("MINIMAX");

        buttonGroup1.add(poda);
        poda.setForeground(new java.awt.Color(255, 255, 255));
        poda.setText("PODA ALFA BETA");

        comeco.setText("Começar");
        comeco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comecoActionPerformed(evt);
            }
        });

        um.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umActionPerformed(evt);
            }
        });

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Facil", "Medio", "Dificil" }));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nível de dificuladade.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(comeco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(quatro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(um, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(oito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cinco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dois, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(nove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(seis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tres, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(minimax)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(poda)
                                .addGap(39, 39, 39))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(rotulo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(rotulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minimax)
                    .addComponent(poda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comeco)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dois, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(um, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quatro, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cinco, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sete, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(oito, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tres, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seis, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nove, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comecoActionPerformed
        //selecionar tipo de algoritmo a ser usado.
        if (poda.isSelected()) {
            algoritmo = 2;
        } else if (minimax.isSelected()) {
            algoritmo = 1;
        } else {
            JOptionPane.showMessageDialog(null, "Escolha um tipo de algoritmo!");
        }

        //escolher a profundidade.
        if (combo.getSelectedItem().equals("Facil")) {
            profundidade = 2;
        } else if (combo.getSelectedItem().equals("Medio")) {
            profundidade = 5;
        } else if (combo.getSelectedItem().equals("Dificil")) {
            profundidade = 9;
        }
        
        //setando os botão para inicio do jogo
        if (poda.isSelected() == true || minimax.isSelected() == true) {
            um.setEnabled(true);
            dois.setEnabled(true);
            tres.setEnabled(true);
            quatro.setEnabled(true);
            cinco.setEnabled(true);
            seis.setEnabled(true);
            sete.setEnabled(true);
            oito.setEnabled(true);
            nove.setEnabled(true);
            poda.setEnabled(false);
            minimax.setEnabled(false);
            comeco.setEnabled(false);
            combo.setEnabled(false);
        }
    }//GEN-LAST:event_comecoActionPerformed

    private void doisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doisActionPerformed
        dois.setIcon(imgX);//setando imagem do botão.
        dois.setEnabled(false);//não permitindo a marcação do botão duas vezes.
        jogada = 2;//atribuindo o valor da jogada.
        velha.mudarVez('x', jogada);//chamando a função mudar vez e passando a jogada de quem é a vez.
        if (profundidade <= 2) {//definindo a profundidade facil.
            profundidade--;//decrementando a profundidade.
            velha.aleatorio();//realizando jogada aleatória.
        } else if (profundidade == 5) {//definindo a profundidade média.
            profundidade--;//decrementando a profundidade.
            velha.aleatorio();//realizando jogada aleatória.
        } else {//se não é nenhum dos níveis acima certamente a profundidade será a máxima.
            for (Cerebro next : velha.prox()) {//para cada no filho da raiz.
                int val = 0;
                if (algoritmo == 2) {//se algoritmo é 2 fazer poda alfa-beta.
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');//chama alfa-beta passando valores
                } 
                else if (algoritmo == 1) {//se algoritmo é 1 fazer poda minimax.
                    val = next.minimax(next, 'x');//chama minimax passando valores
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {//se o valor de retorno for menor ou igual ao maximo infinito...
                    v = val;//maximo infinito recebe o valor.
                    prox = next;//chama o próximo.
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();//vetor recebe o estado do jogo atual.
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];//variavel recene de quem é a jogada na posição i.
            if (pos == 'o') {//se a jogada da vez é bolinha..
                switch (i) {//case para verificação de jogada da bolinha.
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        //a cada botão marcado verifica-se quem é o ganhador.
        char vencedor = velha.verificaGanhador();//recebe quem é o ganhador.
        
        //verifica se o vencedor é x bolinha ou se é empate.
        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }
        
        //tratando se o jogador decide terminar ou iniciar nova partida.
        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_doisActionPerformed

    private void tresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tresActionPerformed
        // TODO add your handling code here:
        tres.setIcon(imgX);
        tres.setEnabled(false);
        jogada = 3;
        velha.mudarVez('x', jogada);
        //   velha.jogar("x", jogada, algoritmo, profundidade);

        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {
            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } // Se algoritmo = 1, fazer minimax
                else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate

        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_tresActionPerformed

    private void quatroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quatroActionPerformed
        // TODO add your handling code here:
        quatro.setIcon(imgX);
        quatro.setEnabled(false);
        jogada = 4;
        velha.mudarVez('x', jogada);
        //     velha.jogar("x", jogada, algoritmo, profundidade);

        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {
            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } // Se algoritmo = 1, fazer minimax
                else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate

        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_quatroActionPerformed

    private void cincoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cincoActionPerformed
        // TODO add your handling code here:
        cinco.setIcon(imgX);
        cinco.setEnabled(false);
        jogada = 5;
        velha.mudarVez('x', jogada);
        //    velha.jogar("x", jogada, algoritmo, profundidade);
        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {
            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } // Se algoritmo = 1, fazer minimax
                else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate

        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_cincoActionPerformed

    private void seisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seisActionPerformed
        // TODO add your handling code here:
        seis.setIcon(imgX);
        seis.setEnabled(false);
        jogada = 6;
        velha.mudarVez('x', jogada);
        //  velha.jogar("x", jogada, algoritmo, profundidade);
        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {
            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } // Se algoritmo = 1, fazer minimax
                else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate

        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_seisActionPerformed

    private void seteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seteActionPerformed
        // TODO add your handling code here:
        sete.setIcon(imgX);
        sete.setEnabled(false);
        jogada = 7;
        velha.mudarVez('x', jogada);
        // velha.jogar("x", jogada, algoritmo, profundidade);
        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {
            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } // Se algoritmo = 1, fazer minimax
                else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate

        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_seteActionPerformed

    private void oitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oitoActionPerformed
        // TODO add your handling code here:
        oito.setIcon(imgX);
        oito.setEnabled(false);
        jogada = 8;
        velha.mudarVez('x', jogada);
        //   velha.jogar("x", jogada, algoritmo, profundidade);

        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {
            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } // Se algoritmo = 1, fazer minimax
                else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate

        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_oitoActionPerformed

    private void noveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noveActionPerformed
        // TODO add your handling code here:
        nove.setIcon(imgX);
        nove.setEnabled(false);
        jogada = 9;
        velha.mudarVez('x', jogada);
        //velha.jogar("x", jogada, algoritmo, profundidade);

        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {
            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } // Se algoritmo = 1, fazer minimax
                else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }
            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }
        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate

        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_noveActionPerformed

    private void umActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umActionPerformed
        // TODO add your handling code here:
        um.setIcon(imgX);
        um.setEnabled(false);
        jogada = 1;
        velha.mudarVez('x', jogada);

        // Para cada no filho da raiz
        if (profundidade <= 2) {
            profundidade--;
            velha.aleatorio();
        } else if (profundidade == 5) {
            profundidade--;
            velha.aleatorio();
        } else {

            for (Cerebro next : velha.prox()) {
                int val = 0;
                // Se algoritmo = 2, fazer alphabeta
                if (algoritmo == 2) {
                    val = next.alphabeta(next, Integer.MIN_VALUE, Integer.MAX_VALUE, 'x');
                } else if (algoritmo == 1) {
                    val = next.minimax(next, 'x');
                } else {
                    System.out.println("Erro na escolha do algoritmo.");
                    System.exit(1);
                }
                if (val <= v) {
                    v = val;
                    prox = next;
                }
            }

            velha = prox;
        }
        char[] saida = velha.saida();
        for (int i = 0; i < 9; ++i) {
            char pos = saida[i];
            if (pos == 'o') {
                switch (i) {
                    case 0:
                        um.setEnabled(false);
                        um.setIcon(imgO);
                        break;
                    case 1:
                        dois.setEnabled(false);
                        dois.setIcon(imgO);
                        break;
                    case 2:
                        tres.setEnabled(false);
                        tres.setIcon(imgO);
                        break;
                    case 3:
                        quatro.setEnabled(false);
                        quatro.setIcon(imgO);
                        break;
                    case 4:
                        cinco.setEnabled(false);
                        cinco.setIcon(imgO);
                        break;
                    case 5:
                        seis.setEnabled(false);
                        seis.setIcon(imgO);
                        break;
                    case 6:
                        sete.setEnabled(false);
                        sete.setIcon(imgO);
                        break;
                    case 7:
                        oito.setEnabled(false);
                        oito.setIcon(imgO);
                        break;
                    case 8:
                        nove.setEnabled(false);
                        nove.setIcon(imgO);
                        break;
                    default:
                        System.out.println("Erro ao marcar O");
                        break;
                }
            }
        }

        char vencedor = velha.verificaGanhador();
        // Se vencedor = e, aconteceu empate
        switch (vencedor) {
            case 'e':
                JOptionPane.showMessageDialog(null, "Ocorreu um empate!", "Empatou!", JOptionPane.INFORMATION_MESSAGE, imgEmpate);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'x':
                JOptionPane.showMessageDialog(null, "Jogador X ganhou!", "Parabéns!", JOptionPane.INFORMATION_MESSAGE, imgGanhaX);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            case 'o':
                JOptionPane.showMessageDialog(null, "Jogador O ganhou!", "Máquina ganhou!", JOptionPane.INFORMATION_MESSAGE, imgGanhaO);
                resposta = JOptionPane.showConfirmDialog(null, "Deseja jogar novamente?", "Jogar novamente?", JOptionPane.YES_NO_OPTION);
                break;
            default:
                break;
        }

        if (resposta == 0) {
            Reset();
        } else if (resposta == 1) {
            dispose();
        }
    }//GEN-LAST:event_umActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JogoVelha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JogoVelha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JogoVelha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JogoVelha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JogoVelha().setVisible(true);
            }
        });
    }
    
    //função de reset, é chamada se o usuário for jogar novamente.
    public void Reset() {
        um.setEnabled(false);
        dois.setEnabled(false);
        tres.setEnabled(false);
        quatro.setEnabled(false);
        cinco.setEnabled(false);
        seis.setEnabled(false);
        sete.setEnabled(false);
        oito.setEnabled(false);
        nove.setEnabled(false);

        poda.setEnabled(true);
        minimax.setEnabled(true);
        comeco.setEnabled(true);
        combo.setEnabled(true);

        um.setIcon(null);
        dois.setIcon(null);
        tres.setIcon(null);
        quatro.setIcon(null);
        cinco.setIcon(null);
        seis.setIcon(null);
        sete.setIcon(null);
        oito.setIcon(null);
        nove.setIcon(null);

        profundidade = 1;
        algoritmo = 0;
        jogada = 0;
        resposta = 10;
        v = Integer.MAX_VALUE;
        prox = null;
        velha.resetVetor();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cinco;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton comeco;
    private javax.swing.JButton dois;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton minimax;
    private javax.swing.JButton nove;
    private javax.swing.JButton oito;
    private javax.swing.JRadioButton poda;
    private javax.swing.JButton quatro;
    private javax.swing.JLabel rotulo;
    private javax.swing.JButton seis;
    private javax.swing.JButton sete;
    private javax.swing.JButton tres;
    private javax.swing.JButton um;
    // End of variables declaration//GEN-END:variables

}
